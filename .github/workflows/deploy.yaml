name: Deploy Terraform and Upload to S3

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ca-central-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        id: terraform
        working-directory: ./terraform
        run: terraform apply -var-file="main.tfvars" -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
          # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'  # Specify the Node version required by your app

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Build the app
      - name: Build the app
        working-directory: ./client/arq-iac-client
        run: npm run build

      # Upload build artifacts (optional, but useful for deployment or review)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/

      - name: Extract S3 bucket name and cloudfront distribution
        run: | 
          echo "S3_BUCKET_NAME=$(terraform output -raw website_bucket_name)" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV
        working-directory: ./terraform

      - name: Sync content to S3
        run: aws s3 sync build s3://$S3_BUCKET_NAME --delete
      - name: Invalidate CloudFront
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

      
      